import cv2
from PIL import Image
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os
import random

TOKEN = " "

balances = {}

SECRET_LINK = "https://youtu.be/xvFZjo5PgG0?si=P5GWnsTtTKoml0SF"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["—Ç–∞–ø —Ç–∞–ø —Ç–∞–ø", "—Ö—Ç–æ —Ç–∏ —Ç–∞–∫–∏–π"],
                ["–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—Ä–æ–±–∫—É...", "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∫–æ—Ç–∏–∫–∞ –ù–ï–ì–ê–ô–ù–û!!!!!!!"],
                ["–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∏–∫–∞ üëπüì∏", "–¥–µ–ø–Ω—É—Ç–∏ –≤ –∫–∞–∑—ñ–∫ üé∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"Welcome, honoroued guest... {update.effective_user.first_name}..."
        f" I cant do anything useful, atleast i can give you coins, or i can make your cat shiny with glasses!!!"
        f"Press 'Send your cat', To send your photo of your cat lol. –¥–∞ –≤–æ—Ç —Ç–∫–∏–π —è –∫–õ—É—Ç–∏–π –≤–∏–∑ –∏–Ω–≥–ª–µ—à",
        reply_markup=reply_markup
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if text == "—Ö—Ç–æ —Ç–∏ —Ç–∞–∫–∏–π":
        await update.message.reply_text(
            "–Ø —Ç–æ–π, —Ö—Ç–æ –ø–æ—Å—Ç—ñ–π–Ω–æ —Å–∏–¥–∏—Ç—å –Ω–∞–¥ —Ç–æ–±–æ—é ;) –¢–∏—Ü—è–π —Ç–∞–ø —Ç–∞–ø —Ç–∞–ø)"
        )

    elif text == "—Ç–∞–ø —Ç–∞–ø —Ç–∞–ø":
        balances[user_id] = balances.get(user_id, 0) + 5
        await update.message.reply_text(
            f"–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –∑–æ–ª–æ—Ç—ñ –º–æ–Ω–µ—Ç–∏! ü§ë –ë–∞–ª–∞–Ω—Å: {balances[user_id]} –º–æ–Ω–µ—Ç."
        )

    elif text == "–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—Ä–æ–±–∫—É...":
        await update.message.reply_text(
            f"–û—Å—å —â–æ —Ç–æ–±—ñ –≤–∏–ø–∞–ª–æ...: {SECRET_LINK}",
            disable_web_page_preview=True
        )

    elif text == "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∫–æ—Ç–∏–∫–∞ –ù–ï–ì–ê–ô–ù–û!!!!!!!":
        try:
            create_cat_with_glasses("caaat.jpeg")
            with open("cat_with_glasses.png", "rb") as photo:
                await update.message.reply_photo(photo, caption="–û–û–û–û –µ–µ–µ–µ–µ–µ")
        except Exception as e:
            await update.message.reply_text(f"–©–æ—Å—å –Ω–µ —Ç–∞–∫...:")

    elif text == "–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–≤–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∏–∫–∞ üëπ":
        await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –∫–æ—Ç–∞, –∞ —è –Ω–∞–ª–∏–ø–ª—é –π–æ–º—É –∫—Ä—É—Ç—ñ –æ–∫—É–ª—è—Ä–∏ (–±–∞–∂–∞–Ω–æ –≤ –ø–æ–≤–Ω–∏–π —Ä—ñ—Å—Ç)")

    elif text == "–¥–µ–ø–Ω—É—Ç–∏ –≤ –∫–∞–∑—ñ–∫ üé∞":
        await casino(update, context)

    else:
        await update.message.reply_text(
            f"{update.effective_user.first_name}! –£ –º–µ–Ω–µ –Ω–µ–º–∞ —Ç–∞–∫–æ–≥–æ!"
        )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"user_cat_{update.effective_user.id}.jpg"
        await photo_file.download_to_drive(photo_path)

        create_cat_with_glasses(photo_path)

        with open("cat_with_glasses.png", "rb") as photo:
            await update.message.reply_photo(photo, caption="–ö—Ä—É—Ç–∏—à–∫–∞ —Ç–µ–ø–µ—Ä")

        os.remove(photo_path)

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–≤—ñ—Ä–∏–≤ —â–æ —Ü–µ –∫—ñ—Ç, –Ω–æ—É —Ñ–æ—Ç–æ —Ñ–æ—Ä —é")


def create_cat_with_glasses(image_path):
    glasses_path = 'glasses.png'
    cascade_path = 'haarcascade_frontalcatface_extended.xml'

    cat_face_cascade = cv2.CascadeClassifier(cascade_path)
    img_cv = cv2.imread(image_path)
    cat_faces = cat_face_cascade.detectMultiScale(img_cv)

    if len(cat_faces) == 0:
        raise ValueError("–ü–µ—Ä–µ—Ä–æ–±–ª—è–π!")

    cat = Image.open(image_path).convert("RGBA")
    glasses = Image.open(glasses_path).convert("RGBA")

    for (x, y, w, h) in cat_faces:
        g = glasses.resize((w * 5, h * 3))
        cat.paste(g, (int(x - 110), int(y - 90)), g)

    cat.save("cat_with_glasses.png")


async def casino(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = balances.get(user_id, 0)

    if balance < 3:
        await update.message.reply_text("–ó–∞–Ω–∞–¥—Ç–æ –±—ñ–¥–Ω–∏–π.)")
        return

    await update.message.reply_text("üé∞ –ö—Ä—É—á—É –≤–µ—Ä—á—É...üé∞")

    result = random.choice(["win2x", "win1.1x", "lose2x"])

    if result == "win2x":
        balances[user_id] = int(balance * 2)
        await update.message.reply_text(f"–õ—é–±–∏—Ç–µ–ª—å –∞–∑–∞—Ä—Ç–Ω–∏—Ö —ñ–≥–æ—Ä.... –ù–∞: {balances[user_id]} –º–æ–Ω–µ—Ç.")
    elif result == "win1.1x":
        balances[user_id] = int(balance * 1.1)
        await update.message.reply_text(f"–ë—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω—ñ—á–æ–≥–æ! {balances[user_id]} –º–æ–Ω–µ—Ç!")
    else:
        balances[user_id] = max(0, balance / 6)
        await update.message.reply_text("–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤!")
        with open("tf2everyonelaugh.mp4", "rb") as gif:
             await update.message.reply_animation(gif, caption="üì∏")

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–•–µ–ª–æ –º–∞–π —Ñ—Ä–µ–Ω–¥, {update.effective_user.first_name} üëã"
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "I cant stop\n"
        "Micheal, dont leave me here!"
    )


app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("hello", hello))
app.add_handler(CommandHandler("stop", stop))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
app.run_polling()
